// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/shima-park/tools/storage/hbase/gen-go/hbase"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

var _ = hbase.GoUnusedProtection__

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  void enableTable(Bytes tableName)")
	fmt.Fprintln(os.Stderr, "  void disableTable(Bytes tableName)")
	fmt.Fprintln(os.Stderr, "  bool isTableEnabled(Bytes tableName)")
	fmt.Fprintln(os.Stderr, "  void compact(Bytes tableNameOrRegionName)")
	fmt.Fprintln(os.Stderr, "  void majorCompact(Bytes tableNameOrRegionName)")
	fmt.Fprintln(os.Stderr, "   getTableNames()")
	fmt.Fprintln(os.Stderr, "   getColumnDescriptors(Text tableName)")
	fmt.Fprintln(os.Stderr, "   getTableRegions(Text tableName)")
	fmt.Fprintln(os.Stderr, "  void createTable(Text tableName,  columnFamilies)")
	fmt.Fprintln(os.Stderr, "  void deleteTable(Text tableName)")
	fmt.Fprintln(os.Stderr, "   get(Text tableName, Text row, Text column,  attributes)")
	fmt.Fprintln(os.Stderr, "   getVer(Text tableName, Text row, Text column, i32 numVersions,  attributes)")
	fmt.Fprintln(os.Stderr, "   getVerTs(Text tableName, Text row, Text column, i64 timestamp, i32 numVersions,  attributes)")
	fmt.Fprintln(os.Stderr, "   getRow(Text tableName, Text row,  attributes)")
	fmt.Fprintln(os.Stderr, "   getRowWithColumns(Text tableName, Text row,  columns,  attributes)")
	fmt.Fprintln(os.Stderr, "   getRowTs(Text tableName, Text row, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "   getRowWithColumnsTs(Text tableName, Text row,  columns, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "   getRows(Text tableName,  rows,  attributes)")
	fmt.Fprintln(os.Stderr, "   getRowsWithColumns(Text tableName,  rows,  columns,  attributes)")
	fmt.Fprintln(os.Stderr, "   getRowsTs(Text tableName,  rows, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "   getRowsWithColumnsTs(Text tableName,  rows,  columns, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "  void mutateRow(Text tableName, Text row,  mutations,  attributes)")
	fmt.Fprintln(os.Stderr, "  void mutateRowTs(Text tableName, Text row,  mutations, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "  void mutateRows(Text tableName,  rowBatches,  attributes)")
	fmt.Fprintln(os.Stderr, "  void mutateRowsTs(Text tableName,  rowBatches, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "  i64 atomicIncrement(Text tableName, Text row, Text column, i64 value)")
	fmt.Fprintln(os.Stderr, "  void deleteAll(Text tableName, Text row, Text column,  attributes)")
	fmt.Fprintln(os.Stderr, "  void deleteAllTs(Text tableName, Text row, Text column, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "  void deleteAllRow(Text tableName, Text row,  attributes)")
	fmt.Fprintln(os.Stderr, "  void increment(TIncrement increment)")
	fmt.Fprintln(os.Stderr, "  void incrementRows( increments)")
	fmt.Fprintln(os.Stderr, "  void deleteAllRowTs(Text tableName, Text row, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "  ScannerID scannerOpenWithScan(Text tableName, TScan scan,  attributes)")
	fmt.Fprintln(os.Stderr, "  ScannerID scannerOpen(Text tableName, Text startRow,  columns,  attributes)")
	fmt.Fprintln(os.Stderr, "  ScannerID scannerOpenWithStop(Text tableName, Text startRow, Text stopRow,  columns,  attributes)")
	fmt.Fprintln(os.Stderr, "  ScannerID scannerOpenWithPrefix(Text tableName, Text startAndPrefix,  columns,  attributes)")
	fmt.Fprintln(os.Stderr, "  ScannerID scannerOpenTs(Text tableName, Text startRow,  columns, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "  ScannerID scannerOpenWithStopTs(Text tableName, Text startRow, Text stopRow,  columns, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "   scannerGet(ScannerID id)")
	fmt.Fprintln(os.Stderr, "   scannerGetList(ScannerID id, i32 nbRows)")
	fmt.Fprintln(os.Stderr, "  void scannerClose(ScannerID id)")
	fmt.Fprintln(os.Stderr, "  TRegionInfo getRegionInfo(Text row)")
	fmt.Fprintln(os.Stderr, "   append(TAppend append)")
	fmt.Fprintln(os.Stderr, "  bool checkAndPut(Text tableName, Text row, Text column, Text value, Mutation mput,  attributes)")
	fmt.Fprintln(os.Stderr, "  TThriftServerType getThriftServerType()")
	fmt.Fprintln(os.Stderr, "  string getClusterId()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
	var m map[string]string = h
	return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
	parts := strings.Split(value, ": ")
	if len(parts) != 2 {
		return fmt.Errorf("header should be of format 'Key: Value'")
	}
	h[parts[0]] = parts[1]
	return nil
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	headers := make(httpHeaders)
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
	flag.Parse()

	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
		if len(headers) > 0 {
			httptrans := trans.(*thrift.THttpClient)
			for key, value := range headers {
				httptrans.SetHeader(key, value)
			}
		}
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := hbase.NewHbaseClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "enableTable":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "EnableTable requires 1 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Bytes(argvalue0)
		fmt.Print(client.EnableTable(context.Background(), value0))
		fmt.Print("\n")
		break
	case "disableTable":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DisableTable requires 1 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Bytes(argvalue0)
		fmt.Print(client.DisableTable(context.Background(), value0))
		fmt.Print("\n")
		break
	case "isTableEnabled":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IsTableEnabled requires 1 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Bytes(argvalue0)
		fmt.Print(client.IsTableEnabled(context.Background(), value0))
		fmt.Print("\n")
		break
	case "compact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Compact requires 1 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Bytes(argvalue0)
		fmt.Print(client.Compact(context.Background(), value0))
		fmt.Print("\n")
		break
	case "majorCompact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MajorCompact requires 1 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Bytes(argvalue0)
		fmt.Print(client.MajorCompact(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getTableNames":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetTableNames requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetTableNames(context.Background()))
		fmt.Print("\n")
		break
	case "getColumnDescriptors":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetColumnDescriptors requires 1 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		fmt.Print(client.GetColumnDescriptors(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getTableRegions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableRegions requires 1 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		fmt.Print(client.GetTableRegions(context.Background(), value0))
		fmt.Print("\n")
		break
	case "createTable":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateTable requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		arg198 := flag.Arg(2)
		mbTrans199 := thrift.NewTMemoryBufferLen(len(arg198))
		defer mbTrans199.Close()
		_, err200 := mbTrans199.WriteString(arg198)
		if err200 != nil {
			Usage()
			return
		}
		factory201 := thrift.NewTJSONProtocolFactory()
		jsProt202 := factory201.GetProtocol(mbTrans199)
		containerStruct1 := hbase.NewHbaseCreateTableArgs()
		err203 := containerStruct1.ReadField2(jsProt202)
		if err203 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.ColumnFamilies
		value1 := argvalue1
		fmt.Print(client.CreateTable(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "deleteTable":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteTable requires 1 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		fmt.Print(client.DeleteTable(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "Get requires 4 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		argvalue2 := []byte(flag.Arg(3))
		value2 := hbase.Text(argvalue2)
		arg208 := flag.Arg(4)
		mbTrans209 := thrift.NewTMemoryBufferLen(len(arg208))
		defer mbTrans209.Close()
		_, err210 := mbTrans209.WriteString(arg208)
		if err210 != nil {
			Usage()
			return
		}
		factory211 := thrift.NewTJSONProtocolFactory()
		jsProt212 := factory211.GetProtocol(mbTrans209)
		containerStruct3 := hbase.NewHbaseGetArgs()
		err213 := containerStruct3.ReadField4(jsProt212)
		if err213 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.Get(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getVer":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetVer requires 5 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		argvalue2 := []byte(flag.Arg(3))
		value2 := hbase.Text(argvalue2)
		tmp3, err217 := (strconv.Atoi(flag.Arg(4)))
		if err217 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		arg218 := flag.Arg(5)
		mbTrans219 := thrift.NewTMemoryBufferLen(len(arg218))
		defer mbTrans219.Close()
		_, err220 := mbTrans219.WriteString(arg218)
		if err220 != nil {
			Usage()
			return
		}
		factory221 := thrift.NewTJSONProtocolFactory()
		jsProt222 := factory221.GetProtocol(mbTrans219)
		containerStruct4 := hbase.NewHbaseGetVerArgs()
		err223 := containerStruct4.ReadField5(jsProt222)
		if err223 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.GetVer(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "getVerTs":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetVerTs requires 6 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		argvalue2 := []byte(flag.Arg(3))
		value2 := hbase.Text(argvalue2)
		argvalue3, err227 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err227 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		tmp4, err228 := (strconv.Atoi(flag.Arg(5)))
		if err228 != nil {
			Usage()
			return
		}
		argvalue4 := int32(tmp4)
		value4 := argvalue4
		arg229 := flag.Arg(6)
		mbTrans230 := thrift.NewTMemoryBufferLen(len(arg229))
		defer mbTrans230.Close()
		_, err231 := mbTrans230.WriteString(arg229)
		if err231 != nil {
			Usage()
			return
		}
		factory232 := thrift.NewTJSONProtocolFactory()
		jsProt233 := factory232.GetProtocol(mbTrans230)
		containerStruct5 := hbase.NewHbaseGetVerTsArgs()
		err234 := containerStruct5.ReadField6(jsProt233)
		if err234 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.Attributes
		value5 := argvalue5
		fmt.Print(client.GetVerTs(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "getRow":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetRow requires 3 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		arg237 := flag.Arg(3)
		mbTrans238 := thrift.NewTMemoryBufferLen(len(arg237))
		defer mbTrans238.Close()
		_, err239 := mbTrans238.WriteString(arg237)
		if err239 != nil {
			Usage()
			return
		}
		factory240 := thrift.NewTJSONProtocolFactory()
		jsProt241 := factory240.GetProtocol(mbTrans238)
		containerStruct2 := hbase.NewHbaseGetRowArgs()
		err242 := containerStruct2.ReadField3(jsProt241)
		if err242 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Attributes
		value2 := argvalue2
		fmt.Print(client.GetRow(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "getRowWithColumns":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetRowWithColumns requires 4 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		arg245 := flag.Arg(3)
		mbTrans246 := thrift.NewTMemoryBufferLen(len(arg245))
		defer mbTrans246.Close()
		_, err247 := mbTrans246.WriteString(arg245)
		if err247 != nil {
			Usage()
			return
		}
		factory248 := thrift.NewTJSONProtocolFactory()
		jsProt249 := factory248.GetProtocol(mbTrans246)
		containerStruct2 := hbase.NewHbaseGetRowWithColumnsArgs()
		err250 := containerStruct2.ReadField3(jsProt249)
		if err250 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		arg251 := flag.Arg(4)
		mbTrans252 := thrift.NewTMemoryBufferLen(len(arg251))
		defer mbTrans252.Close()
		_, err253 := mbTrans252.WriteString(arg251)
		if err253 != nil {
			Usage()
			return
		}
		factory254 := thrift.NewTJSONProtocolFactory()
		jsProt255 := factory254.GetProtocol(mbTrans252)
		containerStruct3 := hbase.NewHbaseGetRowWithColumnsArgs()
		err256 := containerStruct3.ReadField4(jsProt255)
		if err256 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.GetRowWithColumns(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getRowTs":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetRowTs requires 4 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		argvalue2, err259 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err259 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg260 := flag.Arg(4)
		mbTrans261 := thrift.NewTMemoryBufferLen(len(arg260))
		defer mbTrans261.Close()
		_, err262 := mbTrans261.WriteString(arg260)
		if err262 != nil {
			Usage()
			return
		}
		factory263 := thrift.NewTJSONProtocolFactory()
		jsProt264 := factory263.GetProtocol(mbTrans261)
		containerStruct3 := hbase.NewHbaseGetRowTsArgs()
		err265 := containerStruct3.ReadField4(jsProt264)
		if err265 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.GetRowTs(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getRowWithColumnsTs":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetRowWithColumnsTs requires 5 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		arg268 := flag.Arg(3)
		mbTrans269 := thrift.NewTMemoryBufferLen(len(arg268))
		defer mbTrans269.Close()
		_, err270 := mbTrans269.WriteString(arg268)
		if err270 != nil {
			Usage()
			return
		}
		factory271 := thrift.NewTJSONProtocolFactory()
		jsProt272 := factory271.GetProtocol(mbTrans269)
		containerStruct2 := hbase.NewHbaseGetRowWithColumnsTsArgs()
		err273 := containerStruct2.ReadField3(jsProt272)
		if err273 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		argvalue3, err274 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err274 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg275 := flag.Arg(5)
		mbTrans276 := thrift.NewTMemoryBufferLen(len(arg275))
		defer mbTrans276.Close()
		_, err277 := mbTrans276.WriteString(arg275)
		if err277 != nil {
			Usage()
			return
		}
		factory278 := thrift.NewTJSONProtocolFactory()
		jsProt279 := factory278.GetProtocol(mbTrans276)
		containerStruct4 := hbase.NewHbaseGetRowWithColumnsTsArgs()
		err280 := containerStruct4.ReadField5(jsProt279)
		if err280 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.GetRowWithColumnsTs(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "getRows":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetRows requires 3 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		arg282 := flag.Arg(2)
		mbTrans283 := thrift.NewTMemoryBufferLen(len(arg282))
		defer mbTrans283.Close()
		_, err284 := mbTrans283.WriteString(arg282)
		if err284 != nil {
			Usage()
			return
		}
		factory285 := thrift.NewTJSONProtocolFactory()
		jsProt286 := factory285.GetProtocol(mbTrans283)
		containerStruct1 := hbase.NewHbaseGetRowsArgs()
		err287 := containerStruct1.ReadField2(jsProt286)
		if err287 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Rows
		value1 := argvalue1
		arg288 := flag.Arg(3)
		mbTrans289 := thrift.NewTMemoryBufferLen(len(arg288))
		defer mbTrans289.Close()
		_, err290 := mbTrans289.WriteString(arg288)
		if err290 != nil {
			Usage()
			return
		}
		factory291 := thrift.NewTJSONProtocolFactory()
		jsProt292 := factory291.GetProtocol(mbTrans289)
		containerStruct2 := hbase.NewHbaseGetRowsArgs()
		err293 := containerStruct2.ReadField3(jsProt292)
		if err293 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Attributes
		value2 := argvalue2
		fmt.Print(client.GetRows(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "getRowsWithColumns":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetRowsWithColumns requires 4 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		arg295 := flag.Arg(2)
		mbTrans296 := thrift.NewTMemoryBufferLen(len(arg295))
		defer mbTrans296.Close()
		_, err297 := mbTrans296.WriteString(arg295)
		if err297 != nil {
			Usage()
			return
		}
		factory298 := thrift.NewTJSONProtocolFactory()
		jsProt299 := factory298.GetProtocol(mbTrans296)
		containerStruct1 := hbase.NewHbaseGetRowsWithColumnsArgs()
		err300 := containerStruct1.ReadField2(jsProt299)
		if err300 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Rows
		value1 := argvalue1
		arg301 := flag.Arg(3)
		mbTrans302 := thrift.NewTMemoryBufferLen(len(arg301))
		defer mbTrans302.Close()
		_, err303 := mbTrans302.WriteString(arg301)
		if err303 != nil {
			Usage()
			return
		}
		factory304 := thrift.NewTJSONProtocolFactory()
		jsProt305 := factory304.GetProtocol(mbTrans302)
		containerStruct2 := hbase.NewHbaseGetRowsWithColumnsArgs()
		err306 := containerStruct2.ReadField3(jsProt305)
		if err306 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		arg307 := flag.Arg(4)
		mbTrans308 := thrift.NewTMemoryBufferLen(len(arg307))
		defer mbTrans308.Close()
		_, err309 := mbTrans308.WriteString(arg307)
		if err309 != nil {
			Usage()
			return
		}
		factory310 := thrift.NewTJSONProtocolFactory()
		jsProt311 := factory310.GetProtocol(mbTrans308)
		containerStruct3 := hbase.NewHbaseGetRowsWithColumnsArgs()
		err312 := containerStruct3.ReadField4(jsProt311)
		if err312 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.GetRowsWithColumns(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getRowsTs":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetRowsTs requires 4 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		arg314 := flag.Arg(2)
		mbTrans315 := thrift.NewTMemoryBufferLen(len(arg314))
		defer mbTrans315.Close()
		_, err316 := mbTrans315.WriteString(arg314)
		if err316 != nil {
			Usage()
			return
		}
		factory317 := thrift.NewTJSONProtocolFactory()
		jsProt318 := factory317.GetProtocol(mbTrans315)
		containerStruct1 := hbase.NewHbaseGetRowsTsArgs()
		err319 := containerStruct1.ReadField2(jsProt318)
		if err319 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Rows
		value1 := argvalue1
		argvalue2, err320 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err320 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg321 := flag.Arg(4)
		mbTrans322 := thrift.NewTMemoryBufferLen(len(arg321))
		defer mbTrans322.Close()
		_, err323 := mbTrans322.WriteString(arg321)
		if err323 != nil {
			Usage()
			return
		}
		factory324 := thrift.NewTJSONProtocolFactory()
		jsProt325 := factory324.GetProtocol(mbTrans322)
		containerStruct3 := hbase.NewHbaseGetRowsTsArgs()
		err326 := containerStruct3.ReadField4(jsProt325)
		if err326 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.GetRowsTs(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getRowsWithColumnsTs":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetRowsWithColumnsTs requires 5 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		arg328 := flag.Arg(2)
		mbTrans329 := thrift.NewTMemoryBufferLen(len(arg328))
		defer mbTrans329.Close()
		_, err330 := mbTrans329.WriteString(arg328)
		if err330 != nil {
			Usage()
			return
		}
		factory331 := thrift.NewTJSONProtocolFactory()
		jsProt332 := factory331.GetProtocol(mbTrans329)
		containerStruct1 := hbase.NewHbaseGetRowsWithColumnsTsArgs()
		err333 := containerStruct1.ReadField2(jsProt332)
		if err333 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Rows
		value1 := argvalue1
		arg334 := flag.Arg(3)
		mbTrans335 := thrift.NewTMemoryBufferLen(len(arg334))
		defer mbTrans335.Close()
		_, err336 := mbTrans335.WriteString(arg334)
		if err336 != nil {
			Usage()
			return
		}
		factory337 := thrift.NewTJSONProtocolFactory()
		jsProt338 := factory337.GetProtocol(mbTrans335)
		containerStruct2 := hbase.NewHbaseGetRowsWithColumnsTsArgs()
		err339 := containerStruct2.ReadField3(jsProt338)
		if err339 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		argvalue3, err340 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err340 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg341 := flag.Arg(5)
		mbTrans342 := thrift.NewTMemoryBufferLen(len(arg341))
		defer mbTrans342.Close()
		_, err343 := mbTrans342.WriteString(arg341)
		if err343 != nil {
			Usage()
			return
		}
		factory344 := thrift.NewTJSONProtocolFactory()
		jsProt345 := factory344.GetProtocol(mbTrans342)
		containerStruct4 := hbase.NewHbaseGetRowsWithColumnsTsArgs()
		err346 := containerStruct4.ReadField5(jsProt345)
		if err346 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.GetRowsWithColumnsTs(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "mutateRow":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "MutateRow requires 4 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		arg349 := flag.Arg(3)
		mbTrans350 := thrift.NewTMemoryBufferLen(len(arg349))
		defer mbTrans350.Close()
		_, err351 := mbTrans350.WriteString(arg349)
		if err351 != nil {
			Usage()
			return
		}
		factory352 := thrift.NewTJSONProtocolFactory()
		jsProt353 := factory352.GetProtocol(mbTrans350)
		containerStruct2 := hbase.NewHbaseMutateRowArgs()
		err354 := containerStruct2.ReadField3(jsProt353)
		if err354 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Mutations
		value2 := argvalue2
		arg355 := flag.Arg(4)
		mbTrans356 := thrift.NewTMemoryBufferLen(len(arg355))
		defer mbTrans356.Close()
		_, err357 := mbTrans356.WriteString(arg355)
		if err357 != nil {
			Usage()
			return
		}
		factory358 := thrift.NewTJSONProtocolFactory()
		jsProt359 := factory358.GetProtocol(mbTrans356)
		containerStruct3 := hbase.NewHbaseMutateRowArgs()
		err360 := containerStruct3.ReadField4(jsProt359)
		if err360 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.MutateRow(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "mutateRowTs":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "MutateRowTs requires 5 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		arg363 := flag.Arg(3)
		mbTrans364 := thrift.NewTMemoryBufferLen(len(arg363))
		defer mbTrans364.Close()
		_, err365 := mbTrans364.WriteString(arg363)
		if err365 != nil {
			Usage()
			return
		}
		factory366 := thrift.NewTJSONProtocolFactory()
		jsProt367 := factory366.GetProtocol(mbTrans364)
		containerStruct2 := hbase.NewHbaseMutateRowTsArgs()
		err368 := containerStruct2.ReadField3(jsProt367)
		if err368 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Mutations
		value2 := argvalue2
		argvalue3, err369 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err369 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg370 := flag.Arg(5)
		mbTrans371 := thrift.NewTMemoryBufferLen(len(arg370))
		defer mbTrans371.Close()
		_, err372 := mbTrans371.WriteString(arg370)
		if err372 != nil {
			Usage()
			return
		}
		factory373 := thrift.NewTJSONProtocolFactory()
		jsProt374 := factory373.GetProtocol(mbTrans371)
		containerStruct4 := hbase.NewHbaseMutateRowTsArgs()
		err375 := containerStruct4.ReadField5(jsProt374)
		if err375 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.MutateRowTs(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "mutateRows":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "MutateRows requires 3 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		arg377 := flag.Arg(2)
		mbTrans378 := thrift.NewTMemoryBufferLen(len(arg377))
		defer mbTrans378.Close()
		_, err379 := mbTrans378.WriteString(arg377)
		if err379 != nil {
			Usage()
			return
		}
		factory380 := thrift.NewTJSONProtocolFactory()
		jsProt381 := factory380.GetProtocol(mbTrans378)
		containerStruct1 := hbase.NewHbaseMutateRowsArgs()
		err382 := containerStruct1.ReadField2(jsProt381)
		if err382 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.RowBatches
		value1 := argvalue1
		arg383 := flag.Arg(3)
		mbTrans384 := thrift.NewTMemoryBufferLen(len(arg383))
		defer mbTrans384.Close()
		_, err385 := mbTrans384.WriteString(arg383)
		if err385 != nil {
			Usage()
			return
		}
		factory386 := thrift.NewTJSONProtocolFactory()
		jsProt387 := factory386.GetProtocol(mbTrans384)
		containerStruct2 := hbase.NewHbaseMutateRowsArgs()
		err388 := containerStruct2.ReadField3(jsProt387)
		if err388 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Attributes
		value2 := argvalue2
		fmt.Print(client.MutateRows(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "mutateRowsTs":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "MutateRowsTs requires 4 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		arg390 := flag.Arg(2)
		mbTrans391 := thrift.NewTMemoryBufferLen(len(arg390))
		defer mbTrans391.Close()
		_, err392 := mbTrans391.WriteString(arg390)
		if err392 != nil {
			Usage()
			return
		}
		factory393 := thrift.NewTJSONProtocolFactory()
		jsProt394 := factory393.GetProtocol(mbTrans391)
		containerStruct1 := hbase.NewHbaseMutateRowsTsArgs()
		err395 := containerStruct1.ReadField2(jsProt394)
		if err395 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.RowBatches
		value1 := argvalue1
		argvalue2, err396 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err396 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg397 := flag.Arg(4)
		mbTrans398 := thrift.NewTMemoryBufferLen(len(arg397))
		defer mbTrans398.Close()
		_, err399 := mbTrans398.WriteString(arg397)
		if err399 != nil {
			Usage()
			return
		}
		factory400 := thrift.NewTJSONProtocolFactory()
		jsProt401 := factory400.GetProtocol(mbTrans398)
		containerStruct3 := hbase.NewHbaseMutateRowsTsArgs()
		err402 := containerStruct3.ReadField4(jsProt401)
		if err402 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.MutateRowsTs(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "atomicIncrement":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AtomicIncrement requires 4 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		argvalue2 := []byte(flag.Arg(3))
		value2 := hbase.Text(argvalue2)
		argvalue3, err406 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err406 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AtomicIncrement(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "deleteAll":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DeleteAll requires 4 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		argvalue2 := []byte(flag.Arg(3))
		value2 := hbase.Text(argvalue2)
		arg410 := flag.Arg(4)
		mbTrans411 := thrift.NewTMemoryBufferLen(len(arg410))
		defer mbTrans411.Close()
		_, err412 := mbTrans411.WriteString(arg410)
		if err412 != nil {
			Usage()
			return
		}
		factory413 := thrift.NewTJSONProtocolFactory()
		jsProt414 := factory413.GetProtocol(mbTrans411)
		containerStruct3 := hbase.NewHbaseDeleteAllArgs()
		err415 := containerStruct3.ReadField4(jsProt414)
		if err415 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.DeleteAll(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "deleteAllTs":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "DeleteAllTs requires 5 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		argvalue2 := []byte(flag.Arg(3))
		value2 := hbase.Text(argvalue2)
		argvalue3, err419 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err419 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg420 := flag.Arg(5)
		mbTrans421 := thrift.NewTMemoryBufferLen(len(arg420))
		defer mbTrans421.Close()
		_, err422 := mbTrans421.WriteString(arg420)
		if err422 != nil {
			Usage()
			return
		}
		factory423 := thrift.NewTJSONProtocolFactory()
		jsProt424 := factory423.GetProtocol(mbTrans421)
		containerStruct4 := hbase.NewHbaseDeleteAllTsArgs()
		err425 := containerStruct4.ReadField5(jsProt424)
		if err425 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.DeleteAllTs(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "deleteAllRow":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DeleteAllRow requires 3 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		arg428 := flag.Arg(3)
		mbTrans429 := thrift.NewTMemoryBufferLen(len(arg428))
		defer mbTrans429.Close()
		_, err430 := mbTrans429.WriteString(arg428)
		if err430 != nil {
			Usage()
			return
		}
		factory431 := thrift.NewTJSONProtocolFactory()
		jsProt432 := factory431.GetProtocol(mbTrans429)
		containerStruct2 := hbase.NewHbaseDeleteAllRowArgs()
		err433 := containerStruct2.ReadField3(jsProt432)
		if err433 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Attributes
		value2 := argvalue2
		fmt.Print(client.DeleteAllRow(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "increment":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Increment requires 1 args")
			flag.Usage()
		}
		arg434 := flag.Arg(1)
		mbTrans435 := thrift.NewTMemoryBufferLen(len(arg434))
		defer mbTrans435.Close()
		_, err436 := mbTrans435.WriteString(arg434)
		if err436 != nil {
			Usage()
			return
		}
		factory437 := thrift.NewTJSONProtocolFactory()
		jsProt438 := factory437.GetProtocol(mbTrans435)
		argvalue0 := hbase.NewTIncrement()
		err439 := argvalue0.Read(jsProt438)
		if err439 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Increment(context.Background(), value0))
		fmt.Print("\n")
		break
	case "incrementRows":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IncrementRows requires 1 args")
			flag.Usage()
		}
		arg440 := flag.Arg(1)
		mbTrans441 := thrift.NewTMemoryBufferLen(len(arg440))
		defer mbTrans441.Close()
		_, err442 := mbTrans441.WriteString(arg440)
		if err442 != nil {
			Usage()
			return
		}
		factory443 := thrift.NewTJSONProtocolFactory()
		jsProt444 := factory443.GetProtocol(mbTrans441)
		containerStruct0 := hbase.NewHbaseIncrementRowsArgs()
		err445 := containerStruct0.ReadField1(jsProt444)
		if err445 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Increments
		value0 := argvalue0
		fmt.Print(client.IncrementRows(context.Background(), value0))
		fmt.Print("\n")
		break
	case "deleteAllRowTs":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DeleteAllRowTs requires 4 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		argvalue2, err448 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err448 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg449 := flag.Arg(4)
		mbTrans450 := thrift.NewTMemoryBufferLen(len(arg449))
		defer mbTrans450.Close()
		_, err451 := mbTrans450.WriteString(arg449)
		if err451 != nil {
			Usage()
			return
		}
		factory452 := thrift.NewTJSONProtocolFactory()
		jsProt453 := factory452.GetProtocol(mbTrans450)
		containerStruct3 := hbase.NewHbaseDeleteAllRowTsArgs()
		err454 := containerStruct3.ReadField4(jsProt453)
		if err454 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.DeleteAllRowTs(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "scannerOpenWithScan":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ScannerOpenWithScan requires 3 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		arg456 := flag.Arg(2)
		mbTrans457 := thrift.NewTMemoryBufferLen(len(arg456))
		defer mbTrans457.Close()
		_, err458 := mbTrans457.WriteString(arg456)
		if err458 != nil {
			Usage()
			return
		}
		factory459 := thrift.NewTJSONProtocolFactory()
		jsProt460 := factory459.GetProtocol(mbTrans457)
		argvalue1 := hbase.NewTScan()
		err461 := argvalue1.Read(jsProt460)
		if err461 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg462 := flag.Arg(3)
		mbTrans463 := thrift.NewTMemoryBufferLen(len(arg462))
		defer mbTrans463.Close()
		_, err464 := mbTrans463.WriteString(arg462)
		if err464 != nil {
			Usage()
			return
		}
		factory465 := thrift.NewTJSONProtocolFactory()
		jsProt466 := factory465.GetProtocol(mbTrans463)
		containerStruct2 := hbase.NewHbaseScannerOpenWithScanArgs()
		err467 := containerStruct2.ReadField3(jsProt466)
		if err467 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Attributes
		value2 := argvalue2
		fmt.Print(client.ScannerOpenWithScan(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "scannerOpen":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "ScannerOpen requires 4 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		arg470 := flag.Arg(3)
		mbTrans471 := thrift.NewTMemoryBufferLen(len(arg470))
		defer mbTrans471.Close()
		_, err472 := mbTrans471.WriteString(arg470)
		if err472 != nil {
			Usage()
			return
		}
		factory473 := thrift.NewTJSONProtocolFactory()
		jsProt474 := factory473.GetProtocol(mbTrans471)
		containerStruct2 := hbase.NewHbaseScannerOpenArgs()
		err475 := containerStruct2.ReadField3(jsProt474)
		if err475 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		arg476 := flag.Arg(4)
		mbTrans477 := thrift.NewTMemoryBufferLen(len(arg476))
		defer mbTrans477.Close()
		_, err478 := mbTrans477.WriteString(arg476)
		if err478 != nil {
			Usage()
			return
		}
		factory479 := thrift.NewTJSONProtocolFactory()
		jsProt480 := factory479.GetProtocol(mbTrans477)
		containerStruct3 := hbase.NewHbaseScannerOpenArgs()
		err481 := containerStruct3.ReadField4(jsProt480)
		if err481 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.ScannerOpen(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "scannerOpenWithStop":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "ScannerOpenWithStop requires 5 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		argvalue2 := []byte(flag.Arg(3))
		value2 := hbase.Text(argvalue2)
		arg485 := flag.Arg(4)
		mbTrans486 := thrift.NewTMemoryBufferLen(len(arg485))
		defer mbTrans486.Close()
		_, err487 := mbTrans486.WriteString(arg485)
		if err487 != nil {
			Usage()
			return
		}
		factory488 := thrift.NewTJSONProtocolFactory()
		jsProt489 := factory488.GetProtocol(mbTrans486)
		containerStruct3 := hbase.NewHbaseScannerOpenWithStopArgs()
		err490 := containerStruct3.ReadField4(jsProt489)
		if err490 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Columns
		value3 := argvalue3
		arg491 := flag.Arg(5)
		mbTrans492 := thrift.NewTMemoryBufferLen(len(arg491))
		defer mbTrans492.Close()
		_, err493 := mbTrans492.WriteString(arg491)
		if err493 != nil {
			Usage()
			return
		}
		factory494 := thrift.NewTJSONProtocolFactory()
		jsProt495 := factory494.GetProtocol(mbTrans492)
		containerStruct4 := hbase.NewHbaseScannerOpenWithStopArgs()
		err496 := containerStruct4.ReadField5(jsProt495)
		if err496 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.ScannerOpenWithStop(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "scannerOpenWithPrefix":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "ScannerOpenWithPrefix requires 4 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		arg499 := flag.Arg(3)
		mbTrans500 := thrift.NewTMemoryBufferLen(len(arg499))
		defer mbTrans500.Close()
		_, err501 := mbTrans500.WriteString(arg499)
		if err501 != nil {
			Usage()
			return
		}
		factory502 := thrift.NewTJSONProtocolFactory()
		jsProt503 := factory502.GetProtocol(mbTrans500)
		containerStruct2 := hbase.NewHbaseScannerOpenWithPrefixArgs()
		err504 := containerStruct2.ReadField3(jsProt503)
		if err504 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		arg505 := flag.Arg(4)
		mbTrans506 := thrift.NewTMemoryBufferLen(len(arg505))
		defer mbTrans506.Close()
		_, err507 := mbTrans506.WriteString(arg505)
		if err507 != nil {
			Usage()
			return
		}
		factory508 := thrift.NewTJSONProtocolFactory()
		jsProt509 := factory508.GetProtocol(mbTrans506)
		containerStruct3 := hbase.NewHbaseScannerOpenWithPrefixArgs()
		err510 := containerStruct3.ReadField4(jsProt509)
		if err510 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.ScannerOpenWithPrefix(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "scannerOpenTs":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "ScannerOpenTs requires 5 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		arg513 := flag.Arg(3)
		mbTrans514 := thrift.NewTMemoryBufferLen(len(arg513))
		defer mbTrans514.Close()
		_, err515 := mbTrans514.WriteString(arg513)
		if err515 != nil {
			Usage()
			return
		}
		factory516 := thrift.NewTJSONProtocolFactory()
		jsProt517 := factory516.GetProtocol(mbTrans514)
		containerStruct2 := hbase.NewHbaseScannerOpenTsArgs()
		err518 := containerStruct2.ReadField3(jsProt517)
		if err518 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		argvalue3, err519 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err519 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg520 := flag.Arg(5)
		mbTrans521 := thrift.NewTMemoryBufferLen(len(arg520))
		defer mbTrans521.Close()
		_, err522 := mbTrans521.WriteString(arg520)
		if err522 != nil {
			Usage()
			return
		}
		factory523 := thrift.NewTJSONProtocolFactory()
		jsProt524 := factory523.GetProtocol(mbTrans521)
		containerStruct4 := hbase.NewHbaseScannerOpenTsArgs()
		err525 := containerStruct4.ReadField5(jsProt524)
		if err525 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.ScannerOpenTs(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "scannerOpenWithStopTs":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "ScannerOpenWithStopTs requires 6 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		argvalue2 := []byte(flag.Arg(3))
		value2 := hbase.Text(argvalue2)
		arg529 := flag.Arg(4)
		mbTrans530 := thrift.NewTMemoryBufferLen(len(arg529))
		defer mbTrans530.Close()
		_, err531 := mbTrans530.WriteString(arg529)
		if err531 != nil {
			Usage()
			return
		}
		factory532 := thrift.NewTJSONProtocolFactory()
		jsProt533 := factory532.GetProtocol(mbTrans530)
		containerStruct3 := hbase.NewHbaseScannerOpenWithStopTsArgs()
		err534 := containerStruct3.ReadField4(jsProt533)
		if err534 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Columns
		value3 := argvalue3
		argvalue4, err535 := (strconv.ParseInt(flag.Arg(5), 10, 64))
		if err535 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		arg536 := flag.Arg(6)
		mbTrans537 := thrift.NewTMemoryBufferLen(len(arg536))
		defer mbTrans537.Close()
		_, err538 := mbTrans537.WriteString(arg536)
		if err538 != nil {
			Usage()
			return
		}
		factory539 := thrift.NewTJSONProtocolFactory()
		jsProt540 := factory539.GetProtocol(mbTrans537)
		containerStruct5 := hbase.NewHbaseScannerOpenWithStopTsArgs()
		err541 := containerStruct5.ReadField6(jsProt540)
		if err541 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.Attributes
		value5 := argvalue5
		fmt.Print(client.ScannerOpenWithStopTs(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "scannerGet":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScannerGet requires 1 args")
			flag.Usage()
		}
		tmp0, err542 := (strconv.Atoi(flag.Arg(1)))
		if err542 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := hbase.ScannerID(argvalue0)
		fmt.Print(client.ScannerGet(context.Background(), value0))
		fmt.Print("\n")
		break
	case "scannerGetList":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ScannerGetList requires 2 args")
			flag.Usage()
		}
		tmp0, err543 := (strconv.Atoi(flag.Arg(1)))
		if err543 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := hbase.ScannerID(argvalue0)
		tmp1, err544 := (strconv.Atoi(flag.Arg(2)))
		if err544 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.ScannerGetList(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "scannerClose":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScannerClose requires 1 args")
			flag.Usage()
		}
		tmp0, err545 := (strconv.Atoi(flag.Arg(1)))
		if err545 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := hbase.ScannerID(argvalue0)
		fmt.Print(client.ScannerClose(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getRegionInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRegionInfo requires 1 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		fmt.Print(client.GetRegionInfo(context.Background(), value0))
		fmt.Print("\n")
		break
	case "append":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Append requires 1 args")
			flag.Usage()
		}
		arg547 := flag.Arg(1)
		mbTrans548 := thrift.NewTMemoryBufferLen(len(arg547))
		defer mbTrans548.Close()
		_, err549 := mbTrans548.WriteString(arg547)
		if err549 != nil {
			Usage()
			return
		}
		factory550 := thrift.NewTJSONProtocolFactory()
		jsProt551 := factory550.GetProtocol(mbTrans548)
		argvalue0 := hbase.NewTAppend()
		err552 := argvalue0.Read(jsProt551)
		if err552 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Append(context.Background(), value0))
		fmt.Print("\n")
		break
	case "checkAndPut":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "CheckAndPut requires 6 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := hbase.Text(argvalue0)
		argvalue1 := []byte(flag.Arg(2))
		value1 := hbase.Text(argvalue1)
		argvalue2 := []byte(flag.Arg(3))
		value2 := hbase.Text(argvalue2)
		argvalue3 := []byte(flag.Arg(4))
		value3 := hbase.Text(argvalue3)
		arg557 := flag.Arg(5)
		mbTrans558 := thrift.NewTMemoryBufferLen(len(arg557))
		defer mbTrans558.Close()
		_, err559 := mbTrans558.WriteString(arg557)
		if err559 != nil {
			Usage()
			return
		}
		factory560 := thrift.NewTJSONProtocolFactory()
		jsProt561 := factory560.GetProtocol(mbTrans558)
		argvalue4 := hbase.NewMutation()
		err562 := argvalue4.Read(jsProt561)
		if err562 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		arg563 := flag.Arg(6)
		mbTrans564 := thrift.NewTMemoryBufferLen(len(arg563))
		defer mbTrans564.Close()
		_, err565 := mbTrans564.WriteString(arg563)
		if err565 != nil {
			Usage()
			return
		}
		factory566 := thrift.NewTJSONProtocolFactory()
		jsProt567 := factory566.GetProtocol(mbTrans564)
		containerStruct5 := hbase.NewHbaseCheckAndPutArgs()
		err568 := containerStruct5.ReadField6(jsProt567)
		if err568 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.Attributes
		value5 := argvalue5
		fmt.Print(client.CheckAndPut(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "getThriftServerType":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetThriftServerType requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetThriftServerType(context.Background()))
		fmt.Print("\n")
		break
	case "getClusterId":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetClusterId requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetClusterId(context.Background()))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
